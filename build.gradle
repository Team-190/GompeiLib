plugins {
    id 'java-library'
    id 'maven-publish'
    id "com.diffplug.spotless" version "6.12.0"
    id "io.freefair.lombok" version "8.4"
    id "io.freefair.aspectj.post-compile-weaving" version "8.4"
}

group = 'edu.wpi.team190'
version = '1.1'

repositories {
    mavenCentral()
    maven { url = uri("https://frcmaven.wpi.edu/artifactory/release") }
    maven { url = uri("https://frcmaven.wpi.edu/artifactory/littletonrobotics-mvn-release") }
    maven { url = uri("https://maven.ctr-electronics.com/release/") }
    maven { url = uri("https://lib.choreo.autos/dep") }
}

dependencies {
    // WPILib bundle
    compileOnly libs.bundles.wpilib

    // AspectJ
    compileOnly libs.aspectj.rt
    runtimeOnly libs.aspectj.tools

    // CTRE
    compileOnly libs.phoenix6

    // Choreo
    compileOnly libs.choreo

    // AdvantageKit + runtime dependencies
    compileOnly(libs.bundles.advantagekit)
    annotationProcessor libs.advantagekit.autolog

    // Tests
    testImplementation platform('org.junit:junit-bom:5.10.0')
    testImplementation 'org.junit.jupiter:junit-jupiter'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

if (System.getenv("CI") == "true") {
    publishing {
        publications {
            mavenJava(MavenPublication) {
                from components.java
            }
        }
        repositories {
            maven {
                name = "GitHubPackages"
                url = uri("https://maven.pkg.github.com/Team-190/GompeiLib") // Assuming this is your URL
                credentials {
                    // This uses findProperty, which safely returns null if the property
                    // isn't found, preventing the "Could not get unknown property" error
                    // during local builds without credentials.
                    username = System.getenv("GPR_USER") ?: project.findProperty("gpr.user")
                    password = System.getenv("GPR_KEY") ?: project.findProperty("gpr.key")
                }
            }
        }
    }
}


test {
    useJUnitPlatform()
}

// Spotless formatting
project.compileJava.dependsOn(spotlessApply)
spotless {
    java {
        target fileTree(".") {
            include "**/*.java"
            exclude "**/build/**", "**/build-*/**"
        }
        toggleOffOn()
        googleJavaFormat()
        removeUnusedImports()
        trimTrailingWhitespace()
        endWithNewline()
    }
    groovyGradle {
        target fileTree(".") {
            include "**/*.gradle"
            exclude "**/build/**", "**/build-*/**"
        }
        greclipse()
        indentWithSpaces(4)
        trimTrailingWhitespace()
        endWithNewline()
    }
    json {
        target fileTree(".") {
            include "**/*.json"
            exclude "**/build/**", "**/build-*/**"
        }
        gson().indentWithSpaces(2)
    }
    format "misc", {
        target fileTree(".") {
            include "**/*.md", "**/.gitignore"
            exclude "**/build/**", "**/build-*/**"
        }
        trimTrailingWhitespace()
        indentWithSpaces(2)
        endWithNewline()
    }
}
